#include <WebSocketsServer.h>
#include <WiFi.h>
#include "esp_camera.h"
#include "esp_timer.h"
#include "img_converters.h"
#include "Arduino.h"
#include "fb_gfx.h"
#include "soc/soc.h" //disable brownout problems
#include "soc/rtc_cntl_reg.h"  //disable brownout problems
#include "esp_http_server.h"

//Replace with your network credentials
const char* ssid = "June's Home";
const char* password = "wndms0120";

WebSocketsServer webSocket = WebSocketsServer(81);
void onWebSocketEvent(uint8_t num, WStype_t type, uint8_t * payload, size_t length) {
  if(type == WStype_TEXT){
    String msg = (char*)payload;
    webSocket.sendTXT(num, payload);
    Serial.println(msg);
  }
}

#define PART_BOUNDARY "123456789000000000000987654321"
#define PWDN_GPIO_NUM     32
#define RESET_GPIO_NUM    -1
#define XCLK_GPIO_NUM      0
#define SIOD_GPIO_NUM     26
#define SIOC_GPIO_NUM     27
  
#define Y9_GPIO_NUM       35
#define Y8_GPIO_NUM       34
#define Y7_GPIO_NUM       39
#define Y6_GPIO_NUM       36
#define Y5_GPIO_NUM       21
#define Y4_GPIO_NUM       19
#define Y3_GPIO_NUM       18
#define Y2_GPIO_NUM        5
#define VSYNC_GPIO_NUM    25
#define HREF_GPIO_NUM     23
#define PCLK_GPIO_NUM     22

static const char* _STREAM_CONTENT_TYPE = "multipart/x-mixed-replace;boundary=" PART_BOUNDARY;
static const char* _STREAM_BOUNDARY = "\r\n--" PART_BOUNDARY "\r\n";
static const char* _STREAM_PART = "Content-Type: image/jpeg\r\nContent-Length: %u\r\n\r\n";

httpd_handle_t stream_httpd = NULL;

#define index_html_gz_len 2450
const uint8_t index_html_gz[] = {
  0x1f,0x8b,0x08,0x00,0xe8,0x5d,0x6f,0x5f,0x00,0xff,0x95,0x93,0xcf,0x8e,0xd3,0x30,0x10,0xc6,0xef,0x7d,0x0a,0xe3,0x4b,0xb3,0xa2,0xb2,0xdb,0x03,0x62,0xd5,0xa6,0x3d,0xb0,0xec,0x81,0x13,0x48,0x20,0x21,0x8e,0xae,0x3d,0x9b,0x38,0xeb,0x78,0xa2,0x8c,0xdb,0x50,0x10,0xef,0xbe,0x93,0xa6,0x7f,0x02,0x5a,0xd0,0xd2,0x8b,0xc7,0x99,0xf1,0xef,0xf3,0x37,0x53,0xe7,0xaf,0xde,0x7f,0xbc,0xfb,0xf2,0xed,0xd3,0xbd,0x28,0x53,0x1d,0x36,0x93,0x7c,0x58,0x26,0xf9,0x16,0xdd,0x61,0x33,0x11,0xfc,0xcb,0x9d,0xdf,0x0b,0x4a,0x87,0x00,0x6b,0xd9,0x79,0x97,0xca,0xe5,0x62,0x3e,0xdf,0x77,0x2b,0x51,0x82,0x2f,0xca,0x34,0xec,0xe4,0x50,0x7b,0xac,0xf7,0x75,0x21,0xbc,0x5b,0x4b,0x5e,0x4f,0x9f,0x73,0xcd,0x0c,0x86,0xeb,0x81,0x9a,0x93,0x6d,0x7d,0x93,0x04,0xb5,0x76,0x2d,0xcb,0x94,0x1a,0x5a,0x6a,0x6d,0x5d,0xac,0x48,0xd9,0x80,0x3b,0xf7,0x10,0x4c,0x0b,0xca,0x62,0xad,0x4d,0x65,0xbe,0xeb,0xe0,0xb7,0xa4,0xa3,0x6f,0x9a,0x00,0x15,0xe9,0xb9,0xba,0x55,0x6f,0x2f,0x5b,0x55,0xfb,0xa8,0x2a,0x92,0x9b,0x5c,0x0f,0xd0,0x0b,0x7d,0x50,0xb6,0x18,0x29,0x09,0xdf,0x88,0xb5,0xe8,0x7c,0x74,0xd8,0xa9,0x80,0xd6,0x24,0x8f,0x51,0x35,0x2d,0x26,0xb4,0x18,0xc4,0x6b,0x21,0xb5,0x96,0xbc,0xfc,0x59,0x51,0x22,0xa5,0x68,0x6a,0x58,0x8d,0x51,0x6c,0x6e,0x2d,0x1c,0xda,0x5d,0x0d,0x31,0xa9,0x02,0xd2,0x7d,0x80,0x3e,0x7c,0x77,0xf8,0xe0,0xb2,0xa3,0xe7,0x9b,0xa1,0x9e,0x43,0xc5,0x0e,0xb9,0x9a,0xe5,0x7b,0x0d,0x4a,0x2d,0x98,0x5a,0xae,0x26,0x23,0x5c,0x47,0x9c,0x8f,0xd0,0x89,0xaf,0xb0,0xfd,0x8c,0xf6,0x11,0x52,0xe6,0x1b,0xd5,0x42,0x13,0x8c,0x85,0xec,0xd8,0x1c,0x39,0x13,0xb2,0x23,0x79,0xd3,0x33,0x96,0xb7,0x8b,0x33,0xbe,0x23,0x85,0x11,0x1b,0x88,0x0c,0x78,0xd8,0x45,0xdb,0xdf,0x58,0x64,0x35,0x15,0x37,0xe2,0xe7,0x65,0x16,0xbd,0x08,0x06,0x60,0x4b,0x45,0x26,0xef,0x30,0x46,0xb0,0x09,0xdc,0x19,0xf1,0x6b,0x44,0xe2,0xc6,0x13,0xbc,0x1c,0xd5,0x57,0x3f,0xcb,0xa9,0x81,0xc8,0x14,0x2f,0x26,0x71,0x4a,0x39,0x93,0xcc,0x95,0x34,0x6a,0x4e,0x85,0x07,0x4a,0xde,0x3e,0xf6,0x2d,0x3a,0xcf,0xdb,0x72,0x0f,0x13,0x64,0x57,0x5a,0x8d,0x0e,0x96,0x62,0xea,0x0e,0x3c,0x29,0x6f,0xa7,0xb3,0x91,0x4c,0xc0,0x96,0x33,0x45,0x0b,0x10,0x47,0xdf,0xc9,0xff,0xe0,0x03,0x8b,0x37,0xf3,0x41,0x91,0x95,0x8f,0xc1,0x59,0x8c,0x3d,0x64,0x53,0xe7,0xdb,0xe9,0x6c,0xe4,0x00,0xf6,0x69,0x26,0x70,0x5b,0xfd,0xcd,0x06,0xa7,0x14,0x9f,0xe1,0xee,0xf6,0xff,0x1b,0x13,0x8b,0x00,0x27,0x47,0xa7,0xc6,0x10,0x44,0xf7,0x6c,0xd5,0x3f,0x2e,0xc1,0x47,0xfe,0xeb,0x12,0x92,0x12,0x36,0xe7,0x99,0x8c,0x75,0x7f,0x4b,0xf4,0x5a,0xd7,0xc7,0xc2,0xe1,0xf1,0xc5,0x3f,0x01,0x85,0x46,0x77,0x71,0x08,0x04,0x00,0x00
};

static esp_err_t index_handler(httpd_req_t *req){
    httpd_resp_set_type(req, "text/html");
    httpd_resp_set_hdr(req, "Content-Encoding", "gzip");
    sensor_t * s = esp_camera_sensor_get();
    return httpd_resp_send(req, (const char *)index_html_gz, index_html_gz_len);
}

static esp_err_t stream_handler(httpd_req_t *req){
  camera_fb_t * fb = NULL;
  esp_err_t res = ESP_OK;
  size_t _jpg_buf_len = 0;
  uint8_t * _jpg_buf = NULL;
  char * part_buf[64];

  res = httpd_resp_set_type(req, _STREAM_CONTENT_TYPE);
  if(res != ESP_OK){
    return res;
  }

  while(true){
    fb = esp_camera_fb_get();
    if (!fb) {
      Serial.println("Camera capture failed");
      res = ESP_FAIL;
    } else {
      if(fb->width > 400){
        if(fb->format != PIXFORMAT_JPEG){
          bool jpeg_converted = frame2jpg(fb, 80, &_jpg_buf, &_jpg_buf_len);
          esp_camera_fb_return(fb);
          fb = NULL;
          if(!jpeg_converted){
            Serial.println("JPEG compression failed");
            res = ESP_FAIL;
          }
        } else {
          _jpg_buf_len = fb->len;
          _jpg_buf = fb->buf;
        }
      }
    }
    if(res == ESP_OK){
      size_t hlen = snprintf((char *)part_buf, 64, _STREAM_PART, _jpg_buf_len);
      res = httpd_resp_send_chunk(req, (const char *)part_buf, hlen);
    }
    if(res == ESP_OK){
      res = httpd_resp_send_chunk(req, (const char *)_jpg_buf, _jpg_buf_len);
    }
    if(res == ESP_OK){
      res = httpd_resp_send_chunk(req, _STREAM_BOUNDARY, strlen(_STREAM_BOUNDARY));
    }
    if(fb){
      esp_camera_fb_return(fb);
      fb = NULL;
      _jpg_buf = NULL;
    } else if(_jpg_buf){
      free(_jpg_buf);
      _jpg_buf = NULL;
    }
    if(res != ESP_OK){
      break;
    }
    //Serial.printf("MJPG: %uB\n",(uint32_t)(_jpg_buf_len));
  }
  return res;
}

void startCameraServer(){
  httpd_config_t config = HTTPD_DEFAULT_CONFIG();
  config.server_port = 80;

  httpd_uri_t index_uri = {
    .uri       = "/",
    .method    = HTTP_GET,
    .handler   = index_handler,
    .user_ctx  = NULL
  };

  httpd_uri_t stream_uri = {
    .uri       = "/stream",
    .method    = HTTP_GET,
    .handler   = stream_handler,
    .user_ctx  = NULL
    };
  
  //Serial.printf("Starting web server on port: '%d'\n", config.server_port);
  if (httpd_start(&stream_httpd, &config) == ESP_OK) {
    httpd_register_uri_handler(stream_httpd, &index_uri);
    httpd_register_uri_handler(stream_httpd, &stream_uri);
  }
}

void setup() {
  WRITE_PERI_REG(RTC_CNTL_BROWN_OUT_REG, 0); //disable brownout detector
 
  Serial.begin(115200);
  Serial.setDebugOutput(false);
  
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG; 
  config.frame_size = FRAMESIZE_VGA;
  config.jpeg_quality = 15;
  config.fb_count = 2;
  
  // Camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  }
  // Wi-Fi connection
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
  
  Serial.print("Camera Stream Ready! Go to: http://");
  Serial.print(WiFi.localIP());
  
  // Start streaming web server
  startCameraServer();

  // Start websocekt server
  webSocket.begin();
  webSocket.onEvent(onWebSocketEvent);
}

void loop() {
  webSocket.loop();
}
